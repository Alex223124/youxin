require "logger"

rails_env = ENV['RAILS_ENV'] || 'production'
rails_root = ENV['RAILS_ROOT'] || "/home/fahchen/Github/youxin"
youxin_config = YAML.load_file("#{rails_root}/config/youxin.yml")[rails_env || 'production']
unicorn_worker_memory_limit = 300_000

# Unicorn
God.watch do |w|
  w.name = "unicorn"
  w.interval = 30.seconds # default

  # unicorn needs to be run from the rails root
  w.start = "cd #{rails_root} && bundle exec unicorn -D -E #{rails_env} -c config/unicorn.rb"

  # QUIT gracefully shuts down workers
  w.stop = "kill -QUIT `cat #{rails_root}/tmp/pids/unicorn.pid`"

  # USR2 causes the master to re-create itself and spawn a new worker pool
  w.restart = "kill -USR2 `cat #{rails_root}/tmp/pids/unicorn.pid`"

  w.start_grace = 10.seconds
  w.restart_grace = 10.seconds
  w.pid_file = "#{rails_root}/tmp/pids/unicorn.pid"

  w.behavior(:clean_pid_file)

  w.start_if do |start|
    start.condition(:process_running) do |c|
      c.interval = 5.seconds
      c.running = false
    end
  end

  w.restart_if do |restart|
    restart.condition(:memory_usage) do |c|
      c.above = 300.megabytes
      c.times = [3, 5] # 3 out of 5 intervals
    end

    restart.condition(:cpu_usage) do |c|
      c.above = 50.percent
      c.times = 5
    end
  end

  # lifecycle
  w.lifecycle do |on|
    on.condition(:flapping) do |c|
      c.to_state = [:start, :restart]
      c.times = 5
      c.within = 5.minute
      c.transition = :unmonitored
      c.retry_in = 10.minutes
      c.retry_times = 5
      c.retry_within = 2.hours
    end
  end
end

# Unicorn memory limiter
logger = Logger.new("#{rails_root}/log/unicorn_limiter.log")
logger.datetime_format = '%Y-%m-%d %H:%M:%S'

Thread.new do
  loop do
    begin
      # unicorn workers
      #
      # ps output line format:
      # 31580 275444 unicorn worker[15] -c /data/github/current/config/unicorn.rb -E production -D
      # pid ram command

      lines = `ps -e -www -o pid,rss,command | grep '[u]nicorn worker'`.split("\n")
      lines.each do |line|
        parts = line.split(' ')
        if parts[1].to_i > unicorn_worker_memory_limit
          logger.error "RAM: #{parts[1].to_i}"
          # tell the worker to die after it finishes serving its request
          ::Process.kill('QUIT', parts[0].to_i)
        end
      end
    rescue Object
      # don't die ever once we've tested this
      nil
    end

    sleep 30
  end
end


# Resque-work
God.watch do |w|
  w.dir      = "#{rails_root}"
  w.name     = "resque-work"
  w.group    = "resque"
  w.interval = 60.seconds
  w.start    = "bundle exec rake resque:work RAILS_ENV=#{rails_env}"
  w.stop     = "kill -QUIT `cat #{rails_root}/tmp/pids/resque-work.pid`"
  w.log      = "#{rails_root}/log/resque-work.log"
  w.pid_file = "#{rails_root}/tmp/pids/resque-work.pid"

  w.behavior(:clean_pid_file)

  # restart if memory gets too high
  w.transition(:up, :restart) do |on|
    on.condition(:memory_usage) do |c|
      c.above = 350.megabytes
      c.times = 2
    end
  end

  # determine the state on startup
  w.transition(:init, {true => :up, false => :start}) do |on|
    on.condition(:process_running) do |c|
      c.running = true
    end
  end

  # determine when process has finished starting
  w.transition([:start, :restart], :up) do |on|
    on.condition(:process_running) do |c|
      c.running = true
      c.interval = 5.seconds
    end

    # failsafe
    on.condition(:tries) do |c|
      c.times = 5
      c.transition = :start
      c.interval = 5.seconds
    end
  end

  # start if process is not running
  w.transition(:up, :start) do |on|
    on.condition(:process_running) do |c|
      c.running = false
    end
  end
end
# Resque-scheduler
God.watch do |w|
  w.dir      = "#{rails_root}"
  w.name     = "resque-scheduler"
  w.group    = "resque"
  w.interval = 60.seconds
  w.start    = "bundle exec rake resque:scheduler RAILS_ENV=#{rails_env}"
  w.stop     = "kill -QUIT `cat #{rails_root}/tmp/pids/resque-scheduler.pid`"
  w.log      = "#{rails_root}/log/resque-scheduler.log"
  w.pid_file = "#{rails_root}/tmp/pids/resque-scheduler.pid"

  w.behavior(:clean_pid_file)

  # restart if memory gets too high
  w.transition(:up, :restart) do |on|
    on.condition(:memory_usage) do |c|
      c.above = 350.megabytes
      c.times = 2
    end
  end

  # determine the state on startup
  w.transition(:init, {true => :up, false => :start}) do |on|
    on.condition(:process_running) do |c|
      c.running = true
    end
  end

  # determine when process has finished starting
  w.transition([:start, :restart], :up) do |on|
    on.condition(:process_running) do |c|
      c.running = true
      c.interval = 5.seconds
    end

    # failsafe
    on.condition(:tries) do |c|
      c.times = 5
      c.transition = :start
      c.interval = 5.seconds
    end
  end

  # start if process is not running
  w.transition(:up, :start) do |on|
    on.condition(:process_running) do |c|
      c.running = false
    end
  end
end

# Redis
%w{6379}.each do |port|
  God.watch do |w|
    w.name = "redis"
    w.log = "#{rails_root}/log/redis.log"
    w.interval = 60.seconds
    w.start = "redis-server"
    w.stop = "redis-cli shutdown"
    w.restart = "redis-cli shutdown && redis-server"
    w.start_grace = 10.seconds
    w.restart_grace = 10.seconds

    w.start_if do |start|
      start.condition(:process_running) do |c|
        c.interval = 5.seconds
        c.running = false
      end
    end
  end
end

# Faye-server
God.watch do |w|
  w.name          = 'faye-server'
  w.dir           = "#{rails_root}/push_server/faye"
  w.interval      = 60.seconds
  w.start         = "thin start -C thin.yml"
  w.stop          = "thin stop -C thin.yml"
  w.restart       = "thin restart -C thin.yml"
  w.start_grace   = 10.seconds
  w.restart_grace = 10.seconds
  w.pid_file      = "#{rails_root}/push_server/faye/tmp/pids/thin.9292.pid"

  w.behavior(:clean_pid_file)

  w.start_if do |start|
    start.condition(:process_running) do |c|
      c.interval = 5.seconds
      c.running = false
    end
  end

  w.restart_if do |restart|
    restart.condition(:memory_usage) do |c|
      c.above = 150.megabytes
      c.times = [3,5] # 3 out of 5 intervals
    end
  
    restart.condition(:cpu_usage) do |c|
      c.above = 50.percent
      c.times = 5
    end
  end

  w.lifecycle do |on|
    on.condition(:flapping) do |c|
      c.to_state = [:start, :restart]
      c.times = 5
      c.within = 5.minutes
      c.transition = :unmonitored
      c.retry_in = 10.minutes
      c.retry_times = 5
      c.retry_within = 2.hours
    end
  end

end